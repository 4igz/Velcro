--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, shadowing, incorrect_standard_library_use)
-- Server generated by Zap v0.6.2 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local reliable = ReplicatedStorage:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = ReplicatedStorage
end

local unreliable = ReplicatedStorage:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = ReplicatedStorage
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

RunService.Heartbeat:Connect(function()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end)

local events = table.create(12)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = {}
			local len = buffer.readu16(incoming_buff, read(2))
			value.weaponName = buffer.readstring(incoming_buff, read(len), len)
			local len = buffer.readu16(incoming_buff, read(2))
			value.weaponType = buffer.readstring(incoming_buff, read(len), len)
			if events[1] then
				task.spawn(events[1], player, value)
			end
		elseif id == 2 then
			local value
			local len = buffer.readu16(incoming_buff, read(2))
			value = buffer.readstring(incoming_buff, read(len), len)
			if events[2] then
				task.spawn(events[2], player, value)
			end
		elseif id == 3 then
			local value
			value = {}
			value.hitPos = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.rayHit = incoming_inst[incoming_ipos]
			else
				value.rayHit = nil
			end
			if events[3] then
				task.spawn(events[3], player, value)
			end
		elseif id == 9 then
			local value
			value = {}
			local len = buffer.readu16(incoming_buff, read(2))
			value.name = buffer.readstring(incoming_buff, read(len), len)
			value.value = {}
			local enum_value = buffer.readu8(incoming_buff, read(1))
			if enum_value == 0 then
				value.value.type = "num"
				value.value.value = buffer.readf64(incoming_buff, read(8))
			elseif enum_value == 1 then
				value.value.type = "str"
				local len = buffer.readu16(incoming_buff, read(2))
				value.value.value = buffer.readstring(incoming_buff, read(len), len)
			elseif enum_value == 2 then
				value.value.type = "boo"
				value.value.value = buffer.readu8(incoming_buff, read(1)) == 1
			else
				error("Invalid variant")
			end
			if events[9] then
				task.spawn(events[9], player, value)
			end
		elseif id == 10 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[10] then
				task.spawn(function(player, call_id, value)
					local rets = events[10](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 10)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					if rets.zombies == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						alloc(4)
						buffer.writei32(outgoing_buff, outgoing_apos, rets.zombies)
					end
					if rets.wave == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, rets.wave)
					end
					if rets.wavesTillBoss == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, rets.wavesTillBoss)
					end
					if rets.timeLeft == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						alloc(8)
						buffer.writef64(outgoing_buff, outgoing_apos, rets.timeLeft)
					end
					if rets.gameActive == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, rets.gameActive and 1 or 0)
					end
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 11 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[11] then
				task.spawn(function(player, call_id, value)
					local rets = events[11](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 11)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, rets.level)
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, rets.xp)
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 12 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[12] then
				task.spawn(function(player, call_id, value)
					local rets = events[12](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 12)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					local len = #rets.equippedWeapons.gun
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len)
					alloc(len)
					buffer.writestring(outgoing_buff, outgoing_apos, rets.equippedWeapons.gun, len)
					local len = #rets.equippedWeapons.melee
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len)
					alloc(len)
					buffer.writestring(outgoing_buff, outgoing_apos, rets.equippedWeapons.melee, len)
					local len = #rets.equippedWeapons.equipment
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len)
					alloc(len)
					buffer.writestring(outgoing_buff, outgoing_apos, rets.equippedWeapons.equipment, len)
					local len = #rets.ownedWeapons
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len)
					for i = 1, len do
						local rets_ownedWeapons_v = rets.ownedWeapons[i]
						local len = #rets_ownedWeapons_v
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len)
						alloc(len)
						buffer.writestring(outgoing_buff, outgoing_apos, rets_ownedWeapons_v, len)
					end
					player_map[player] = save()
				end, player, call_id, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 4 then
		local value
		if events[4] then
			task.spawn(events[4], player, value)
		end
	else
		error("Unknown event id")
	end
end)
return {
	replicateHit = {
		Fire = function(Player: Player, Value: ({
			weaponName: (string),
			victim: ((string)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len = #Value.weaponName
			assert(len <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len)
			if Value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len = #Value.victim
				assert(len <= 20)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len)
				alloc(len)
				buffer.writestring(outgoing_buff, outgoing_apos, Value.victim, len)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			weaponName: (string),
			victim: ((string)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len = #Value.weaponName
			assert(len <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len)
			if Value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len = #Value.victim
				assert(len <= 20)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len)
				alloc(len)
				buffer.writestring(outgoing_buff, outgoing_apos, Value.victim, len)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			weaponName: (string),
			victim: ((string)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len = #Value.weaponName
			assert(len <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len)
			if Value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len = #Value.victim
				assert(len <= 20)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len)
				alloc(len)
				buffer.writestring(outgoing_buff, outgoing_apos, Value.victim, len)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			weaponName: (string),
			victim: ((string)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len = #Value.weaponName
			assert(len <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len)
			if Value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len = #Value.victim
				assert(len <= 20)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len)
				alloc(len)
				buffer.writestring(outgoing_buff, outgoing_apos, Value.victim, len)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	replicateCast = {
		Fire = function(Player: Player, Value: ({
			firepoint: (Attachment),
			hit: (Vector3),
			beamColor: ((unknown)?),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			assert(Value.firepoint:IsA("Attachment"))
			table.insert(outgoing_inst, Value.firepoint)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.Z)
			if Value.beamColor == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.beamColor)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			firepoint: (Attachment),
			hit: (Vector3),
			beamColor: ((unknown)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			assert(Value.firepoint:IsA("Attachment"))
			table.insert(outgoing_inst, Value.firepoint)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.Z)
			if Value.beamColor == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.beamColor)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			firepoint: (Attachment),
			hit: (Vector3),
			beamColor: ((unknown)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			assert(Value.firepoint:IsA("Attachment"))
			table.insert(outgoing_inst, Value.firepoint)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.Z)
			if Value.beamColor == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.beamColor)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			firepoint: (Attachment),
			hit: (Vector3),
			beamColor: ((unknown)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			assert(Value.firepoint:IsA("Attachment"))
			table.insert(outgoing_inst, Value.firepoint)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hit.Z)
			if Value.beamColor == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.beamColor)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	updateUI = {
		Fire = function(Player: Player, Value: ({
			zombies: ((number)?),
			wave: ((number)?),
			wavesTillBoss: ((number)?),
			timeLeft: ((number)?),
			gameActive: ((boolean)?),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			if Value.zombies == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.zombies)
			end
			if Value.wave == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.wave)
			end
			if Value.wavesTillBoss == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.wavesTillBoss)
			end
			if Value.timeLeft == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(8)
				buffer.writef64(outgoing_buff, outgoing_apos, Value.timeLeft)
			end
			if Value.gameActive == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.gameActive and 1 or 0)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			zombies: ((number)?),
			wave: ((number)?),
			wavesTillBoss: ((number)?),
			timeLeft: ((number)?),
			gameActive: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			if Value.zombies == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.zombies)
			end
			if Value.wave == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.wave)
			end
			if Value.wavesTillBoss == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.wavesTillBoss)
			end
			if Value.timeLeft == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(8)
				buffer.writef64(outgoing_buff, outgoing_apos, Value.timeLeft)
			end
			if Value.gameActive == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.gameActive and 1 or 0)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			zombies: ((number)?),
			wave: ((number)?),
			wavesTillBoss: ((number)?),
			timeLeft: ((number)?),
			gameActive: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			if Value.zombies == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.zombies)
			end
			if Value.wave == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.wave)
			end
			if Value.wavesTillBoss == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.wavesTillBoss)
			end
			if Value.timeLeft == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(8)
				buffer.writef64(outgoing_buff, outgoing_apos, Value.timeLeft)
			end
			if Value.gameActive == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.gameActive and 1 or 0)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			zombies: ((number)?),
			wave: ((number)?),
			wavesTillBoss: ((number)?),
			timeLeft: ((number)?),
			gameActive: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			if Value.zombies == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.zombies)
			end
			if Value.wave == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.wave)
			end
			if Value.wavesTillBoss == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.wavesTillBoss)
			end
			if Value.timeLeft == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(8)
				buffer.writef64(outgoing_buff, outgoing_apos, Value.timeLeft)
			end
			if Value.gameActive == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.gameActive and 1 or 0)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	updateLevelUi = {
		Fire = function(Player: Player, Value: ({
			level: (number),
			xp: (number),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.level)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.xp)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			level: (number),
			xp: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.level)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.xp)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			level: (number),
			xp: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.level)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.xp)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			level: (number),
			xp: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.level)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.xp)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	buyWeapon = {
		SetCallback = function(Callback: (Player, ({
			weaponName: (string),
			weaponType: (string),
		})) -> ()): () -> ()
			events[1] = Callback
			return function()
				events[1] = nil
			end
		end,
	},
	equipWeapon = {
		SetCallback = function(Callback: (Player, (string)) -> ()): () -> ()
			events[2] = Callback
			return function()
				events[2] = nil
			end
		end,
	},
	fireGun = {
		SetCallback = function(Callback: (Player, ({
			hitPos: (Vector3),
			rayHit: ((Instance)?),
		})) -> ()): () -> ()
			events[3] = Callback
			return function()
				events[3] = nil
			end
		end,
	},
	melee = {
		SetCallback = function(Callback: (Player) -> ()): () -> ()
			events[4] = Callback
			return function()
				events[4] = nil
			end
		end,
	},
	attributeChangedEvent = {
		SetCallback = function(Callback: (Player, ({
			name: (string),
			value: ({
				type: "num",
				value: (number),
			} | {
				type: "str",
				value: (string),
			} | {
				type: "boo",
				value: (boolean),
			}),
		})) -> ()): () -> ()
			events[9] = Callback
			return function()
				events[9] = nil
			end
		end,
	},
	getTopbarUIInfo = {
		SetCallback = function(Callback: (Player) -> (({
			zombies: ((number)?),
			wave: ((number)?),
			wavesTillBoss: ((number)?),
			timeLeft: ((number)?),
			gameActive: ((boolean)?),
		}))): () -> ()
			events[10] = Callback
			return function()
				events[10] = nil
			end
		end,
	},
	getLevelData = {
		SetCallback = function(Callback: (Player) -> (({
			level: (number),
			xp: (number),
		}))): () -> ()
			events[11] = Callback
			return function()
				events[11] = nil
			end
		end,
	},
	getOwnedWeapons = {
		SetCallback = function(Callback: (Player) -> (({
			equippedWeapons: ({
				gun: (string),
				melee: (string),
				equipment: (string),
			}),
			ownedWeapons: ({ (string) }),
		}))): () -> ()
			events[12] = Callback
			return function()
				events[12] = nil
			end
		end,
	},
}
