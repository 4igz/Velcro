--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, shadowing, incorrect_standard_library_use)
-- Client generated by Zap v0.6.2 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end

local reliable = ReplicatedStorage:WaitForChild("ZAP_RELIABLE")
local unreliable = ReplicatedStorage:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")

local time = 0

RunService.Heartbeat:Connect(function(dt)
	time += dt

	if time >= (1 / 61) then
		time -= (1 / 61)

		if outgoing_used ~= 0 then
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

			reliable:FireServer(buff, outgoing_inst)

			outgoing_buff = buffer.create(64)
			outgoing_used = 0
			outgoing_size = 64
			table.clear(outgoing_inst)
		end
	end
end)

local events = table.create(6)
local event_queue: { [number]: { any } } = table.create(6)
event_queue[5] = {}
event_queue[6] = {}
unreliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 5 then
		local value
		value = {}
		local len = buffer.readu16(incoming_buff, read(2))
		assert(len <= 25)
		value.weaponName = buffer.readstring(incoming_buff, read(len), len)
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			local len = buffer.readu16(incoming_buff, read(2))
			assert(len <= 20)
			value.victim = buffer.readstring(incoming_buff, read(len), len)
		else
			value.victim = nil
		end
		value.targetHit = buffer.readu8(incoming_buff, read(1)) == 1
		if events[5] then
			task.spawn(events[5], value)
		else
			table.insert(event_queue[5], value)
			if #event_queue[5] > 64 then
				warn(`[ZAP] {#event_queue[5]} events in queue for replicateHit. Did you forget to attach a listener?`)
			end
		end
	elseif id == 6 then
		local value
		value = {}
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			value.zombies = buffer.readu16(incoming_buff, read(2))
		else
			value.zombies = nil
		end
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			value.wave = buffer.readu16(incoming_buff, read(2))
		else
			value.wave = nil
		end
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			value.wavesTillBoss = buffer.readu16(incoming_buff, read(2))
		else
			value.wavesTillBoss = nil
		end
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			value.timeLeft = buffer.readf64(incoming_buff, read(8))
		else
			value.timeLeft = nil
		end
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			value.gameActive = buffer.readu8(incoming_buff, read(1)) == 1
		else
			value.gameActive = nil
		end
		if events[6] then
			task.spawn(events[6], value)
		else
			table.insert(event_queue[6], value)
			if #event_queue[6] > 64 then
				warn(`[ZAP] {#event_queue[6]} events in queue for updateUI. Did you forget to attach a listener?`)
			end
		end
	else
		error("Unknown event id")
	end
end)
return {
	buyWeapon = {
		Fire = function(Value: ({
			weaponName: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len)
		end,
	},
	equipWeapon = {
		Fire = function(Value: ({
			weaponName: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len)
		end,
	},
	fireGun = {
		Fire = function(Value: ({
			hitPos: (Vector3),
			rayHit: ((Instance)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hitPos.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hitPos.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.hitPos.Z)
			if Value.rayHit == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.rayHit)
			end
		end,
	},
	melee = {
		Fire = function()
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	replicateHit = {
		SetCallback = function(Callback: (({
			weaponName: (string),
			victim: ((string)?),
			targetHit: (boolean),
		})) -> ()): () -> ()
			events[5] = Callback
			for _, value in event_queue[5] do
				task.spawn(Callback, value)
			end
			event_queue[5] = {}
			return function()
				events[5] = nil
			end
		end,
	},
	updateUI = {
		SetCallback = function(Callback: (({
			zombies: ((number)?),
			wave: ((number)?),
			wavesTillBoss: ((number)?),
			timeLeft: ((number)?),
			gameActive: ((boolean)?),
		})) -> ()): () -> ()
			events[6] = Callback
			for _, value in event_queue[6] do
				task.spawn(Callback, value)
			end
			event_queue[6] = {}
			return function()
				events[6] = nil
			end
		end,
	},
}
